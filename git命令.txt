git log命令显示从最近到最远的提交日志
git log --pretty=oneline 将commit信息压缩成一行
git reflog用来记录你的每一次命令：
git reset --hard HEAD 回退到上一个版本
git reset --hard commit id 回退到指定版本

git checkout -- file 可以丢弃工作区的修改,暂存区也可以
git reset HEAD <file> 可以把暂存区的修改撤销掉（unstage）


git checkout -b dev== git branch dev
                                    git checkout dev

git branch命令会列出所有分支，当前分支前面会标一个*号。
git checkout 命令会切换到指定分支


git merge命令用于合并指定分支到当前分支。

git branch -d 删除指定分支

用git log --graph命令可以看到分支合并图。
git log --graph --pretty=oneline --abbrev-commit  简化查看


通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
git merge --no-ff -m "merge with no-ff" dev
这个命令可以看到 -m "merge with no-ff" 这句话，和commit提交时一样需要备注信息。普通merge是将master指针直接
指向dev分支最新的提交。但这个命令会生成一个新提交，这样可以保存到dev分支的信息，


Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：

工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了：


在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。



远程操作（从本地关联到远程空仓库）：
先创建公钥和私钥： ssh-keygen -t rsa -C "youremail@example.com"

第一步：git remote add origin git@github.com:michaelliao/learngit.git 将远程库和本地仓库关联起来
第二步：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
             还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
从现在起只要作了提交，就可以通过命令：git push origin master 把本地master分支的最新修改推送至GitHub，现在，我就拥有了真正的分布式版本库！

远程操作（从远程仓库关联到本地空仓库）：

git clone git@github.com:michaelliao/gitskills.git 将远程仓库克隆下来

远程仓库的多人合作情况：
多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。

这就是多人协作的工作模式。
